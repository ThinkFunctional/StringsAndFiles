# Name: Strings and Files Unit Test
# Time: 10/25/2022 @ 12:45 pm

# Helper Functions
import operator as op
import traceback

eq_comp = op.__eq__
is_comp = op.is_

def elems_comp(a_list, b_list):
    # Return true if every element of a is an element of b and vice versa, False otherwise
    if not isinstance(a_list, list) or not isinstance(b_list, list):
        return False
    for elem in a_list:
        if elem not in b_list:
            return False
    for elem in b_list:
        if elem not in b_list:
            return False
    return True

def order_comp(a_list, b_list):
    for i in range(len(a_list)):
        try:
            if a_list[i] != b_list[i]:
                return False
        except:
            return False
    return True

def eq_not_is(an_obj, another_obj):
    return (an_obj == another_obj) and not(an_obj is another_obj)

def approx_eq(expected, actual):
    if isinstance(expected, (int, float, complex)):
        if not isinstance(actual, (int, float, complex)):
            return False
        return abs(expected - actual) < 0.000001
    return False

def build_arg_str(args, is_poly):
    arg_str = ""
    if is_poly:
        for arg in args:
            if callable(arg):
                arg_str = arg_str + arg.__name__ + " "
            else:
                if isinstance(arg, str):
                    arg_str = arg_str + "'" + arg + "'" + " "
                else:
                    arg_str = arg_str + str(arg) + " "
    else:
        if callable(args):
            arg_str = args.__name__
        else:
            if isinstance(args, str):
                arg_str = "'" + args + "'"
            else:
                arg_str = str(args)
    return arg_str.strip()

class Unit():

    def __init__(self, func, name, cases, is_polyadic, is_mutator, test_type):
        # If the function is polyadic, we need to * the input so that it unpacks.
        # If the function is a mutator, we don't ask for its return value.
        # Instead we compare the input after the function is called to the correct mutated value.
        # Six test types are required:
        # 1. Verify equality of value: eq_comp
        # 2. Verify identity: is_comp
        # 3. Verify equality of value and non-identity: eq_not_is
        # 4. Verify that two lists have the same elements, order irrelevant: elems_comp
        # 5. Verify that two lists have same elements in same order: order_comp
        # 6. Verify that two floats are close enough: approx_eq
        self.func = func
        self.name = name
        self.cases = cases
        self.is_polyadic = is_polyadic
        self.is_mutator = is_mutator
        self.test_type = test_type
        self.score = 0

    def add_test(self, new_test):
        self.cases.append(new_test)

class UnitTest():

    def __init__(self, name, units):
        self.name = name
        self.units = units
        self.score = 0
        self.num_tests = 0

    def run_test(self):
        test_file = open("report.txt", "w")
        test_file.write(self.name + "\n")
        total_score = 0
        pts_lost_dict = {}
        for unit in self.units:
            pts_lost_dict[unit.name] = 0
            test_file.write("\nFunction: \"" + unit.name + "\"\n")
            for case in unit.cases:
                self.num_tests += 1
                arg = case[0]
                expected_value = case[1]
                arg_str = build_arg_str(arg, unit.is_polyadic)
                test_file.write("Argument(s): " + arg_str + "  ")
                # Now flush the contents of the write buffer so that if a function hangs,
                # the report will show precisely where it happened.
                test_file.flush()
                try:
                    if unit.is_polyadic:
                        actual_value = unit.func(*arg)
                    else:
                        actual_value = unit.func(arg) 
                except Exception as err:
                    # Do not print error if function hasn't been implemented (no arguments defined but passing args error).
					# This avoids giving students a wall of errors when starting project.
                    if "takes 0 positional arguments but" not in str(err):
                        # Print error to console
                        traceback.print_exc()
                    test_file.write("Crash! No points!\n")
                    pts_lost_dict[unit.name] += 1
                else:
                    if not unit.is_mutator:
                        if unit.test_type(expected_value, actual_value):
                            test_file.write("  Return value correct! +1\n")
                            unit.score += 1
                        else:
                            test_file.write("  Incorrect return value! No point!\n")
                            pts_lost_dict[unit.name] += 1
                    else:
                        if unit.is_polyadic:
                            mutated_value = arg[0]
                        else:
                            mutated_value = arg
                        if unit.test_type(expected_value, mutated_value):
                            test_file.write("  Mutated value correct! +1\n")
                            unit.score += 1
                        else:
                            test_file.write("  Incorrect mutated value! No point!\n")
                            pts_lost_dict[unit.name] += 1

            total_score += unit.score

        self.score = total_score
        test_file.write("\nSummary:")
        if self.score < self.num_tests:
            for name in pts_lost_dict:
                pts_lost = pts_lost_dict[name]
                if pts_lost > 0:
                    test_file.write("\nFunction \"" + name + "\", points lost " + str(pts_lost) + ".")
        else:
            test_file.write(" Perfection!")
        summary = "Final Score: " + str(self.score) + "/" + str(self.num_tests)
        test_file.write("\n\n" + summary)
        print(summary)

# Test Cases (tc)
# Format: a list of tuples where each tuple
# gives an argument (or tuple of arguments)
# and the expected return for that argument.
char_count_tc = [(('tis but a scratch', 's'), 2),
                 (('tis but a scratch', 'z'), 0),
                 (('tis but a scratch', ''), 0),
                 (('', ''), 0)]
reverse_tc = [('tis but a scratch', 'hctarcs a tub sit'),
               ('  ', '  '),
               ('', '')]
index_first_tc = [(('tis but a scratch', 't'), 0),
               (('tis but a scratch', ' '), 3),
               (('tis but a scratch', 'z'), -1),
               (('tis but a scratch', ''), -1)]
index_last_tc = [(('tis but a scratch', 't'), 14),
                 (('tis but a scratch', ' '), 9),
                 (('tis but a scratch', 'z'), -1),
                 (('tis but a scratch', ''), -1)]
strip_char_tc = [(('tis but a scratch', 't'), 'is bu a scrach'),
                (('tis but a scratch', ' '), 'tisbutascratch'),
                (('tis but a scratch', 'z'), 'tis but a scratch'),
                (('tis but a scratch', ''), 'tis but a scratch')]
to_alphanum_tc = [('tis but a scratch', 'tisbutascratch'),
                  ('t1is bu2t 3a s!c&ratch@', 't1isbu2t3ascratch'),
                  ('!@#$%^&*()_+', ''),
                  ('   ',''),
                  ('', '')]
is_pangram_tc = [('Waltz, nymph, for quick jigs vex bud.', True),
                 ('Lustful dimwitted ducks roast upon a quartered fireplace of zirconium.', False),
                 ('', False)]
is_palindrome_tc = [('Mr. Owl Ate My Metal Worm', True),
                    ('A Man, A Plan, A Canal-Panama!', True),
                    ('Was It A Ram I Saw?', False),
                    ('  ', True),
                    ('', True)]
is_anagram_tc = [(('fish', 'fish'), True),
                 (('fish', 'sifh'), True),
                 (('fish', 'fishh'), False),
                 (('fishs', 'fishh'), False),
                 (('', ''), True)]
is_int_tc = [('', False), (' ', False), ('12', True), (' 12  ', True), (' 1 2', False),
             ('-+--12', True), ('- +--12', False), ('-+-- 12', True), ('-1+--12', False),
             ('-+--1-2', False)]
caesar_cipher_tc = [(('fish', 0), 'fish'),
                    (('fish', 1), 'gjti'),
                    (('fish', -1), 'ehrg'),
                    (('fish', 1234567), 'orbq'),
                    (('fish', -1234567), 'wzjy')]
space_cull_tc = [('   tis   but     a      scratch  ', 'tis but a scratch'),
                ('   ', ''),
                ('', '')]
word_list_tc = [('tis but a scratch', ['tis', 'but', 'a', 'scratch']),
                ('   ', []),
                ('', [])]
pyg_latin_tc = [('fish', 'ish-fay'),
                ('frish', 'ish-fray'),
                ('ish', 'ish-way'),
                ('tis but a scratch', 'is-tay ut-bay a-way atch-scray')]
is_balanced_tc = [('(2*3)', True),
                  ('(2*3))', False),
                  (')2*3(', False),
                  ('2*3', True),
                  ('', True)]
bi_to_dec_tc = [('0', 0),
                ('1', 1),
                ('11', 3),
                ('11011101111', 1775)]
pal_seq_tc = [(1, 1), (12, 33), (144, 4554), (1728, 729927)]
des_seq_tc = [(1, '0'), (2, '10'), (9, '1113122113121113222110'),
               (15, '11131221131211132221232112111312111213111213211231132132211211131221232112111312212221121123222110')]
pangram_count_tc = [('pgram_file.txt', 18)]

snowflake_tc = [(4, 'F-F++F-F-F-F++F-F++F-F++F-F-F-F++F-F-F-F++F-F-F-F++F-F++F-F++F-F-F-F++F-F++F-F++F-F-F-F++F-F++F-F++F-F-F-F++F-F-F-F++F-F-F-F++F-F++F-F++F-F-F-F++F-F')]
hilbert_tc = [(3, '+-LF+RFR+FL-F-+RF-LFL-FR+F+RF-LFL-FR+-F-LF+RFR+FL-+')]
dragon_tc = [(6, 'FX+YF++-FX-YF++-FX+YF+--FX-YF++-FX+YF++-FX-YF+--FX+YF+--FX-YF++-FX+YF++-FX-YF++-FX+YF+--FX-YF+--FX+YF++-FX-YF+--FX+YF+--FX-YF+')]
arrowhead_tc = [(4, 'XF-YF-XF+YF+XF+YF+XF-YF-XF-YF+XF+YF-XF-YF-XF-YF+XF+YF-XF-YF-XF+YF+XF+YF+XF-YF-XF')]
peano_gosper_tc = [(3, 'FX+YF++YF-FX--FXFX-YF++-FX+YFYF++YF+FX--FX-YF++-FX+YFYF++YF+FX--FX-YF-FX+YF++YF-FX--FXFX-YF+--FX+YF++YF-FX--FXFX-YF+FX+YF++YF-FX--FXFX-YF+--FX+YFYF++YF+FX--FX-YF+')]
sierpinski_tri_tc = [(3, 'FFFF--FF--FXF++FXF++FXF--FF++FF--FXF++FXF++FXF--FF++FF--FXF++FXF++FXF--FF--FFFF--FFFFFFFF--FFFFFFFF')]

# Create Units
# This block will cause a crash if you haven't created all of the required functions.
# Format: Unit(func, name, cases, is_polyadic, test_type)
# Test types: eq_comp, is_comp, eq_not_is, elems_comp
char_count_unit = Unit(char_count, 'char_count', char_count_tc, True, False, eq_comp)
reverse_unit = Unit(reverse, 'reverse', reverse_tc, False, False, eq_comp)
index_first_unit = Unit(index_first, 'index_first', index_first_tc, True, False, eq_comp)
index_last_unit = Unit(index_last, 'index_last', index_last_tc, True, False, eq_comp)
strip_char_unit = Unit(strip_char, 'strip_char', strip_char_tc, True, False, eq_comp)
to_alphanum_unit = Unit(to_alphanum, 'to_alphanum', to_alphanum_tc, False, False, eq_comp)
is_pangram_unit = Unit(is_pangram, 'is_pangram', is_pangram_tc, False, False, eq_comp)
is_palindrome_unit = Unit(is_palindrome, 'is_palindrome', is_palindrome_tc, False, False, eq_comp)
is_anagram_unit = Unit(is_anagram, 'is_anagram', is_anagram_tc, True, False, eq_comp)
is_int_unit = Unit(is_int, 'is_int', is_int_tc, False, False, eq_comp)
caesar_cipher_unit = Unit(caesar_cipher, 'caesar_cipher', caesar_cipher_tc, True, False, eq_comp)
space_cull_unit = Unit(space_cull, 'space_cull', space_cull_tc, False, False, eq_comp)
word_list_unit = Unit(word_list, 'word_list', word_list_tc, False, False, elems_comp)
pyg_latin_unit = Unit(pyg_latin, 'pyg_latin', pyg_latin_tc, False, False, eq_comp)
is_balanced_unit = Unit(is_balanced, 'is_balanced', is_balanced_tc, False, False, eq_comp)
bi_to_dec_unit = Unit(bi_to_dec, 'bi_to_dec', bi_to_dec_tc, False, False, eq_comp)
pal_seq_unit = Unit(pal_seq, 'palindromic sequence', pal_seq_tc, False, False, eq_comp)
des_seq_unit = Unit(des_seq, 'self-descriptive sequence', des_seq_tc, False, False, eq_comp)
pangram_count_unit = Unit(pangram_count, 'pangram_count', pangram_count_tc, False, False, eq_comp)
snowflake_unit = Unit(snowflake, 'snowflake', snowflake_tc, False, False, eq_comp)
hilbert_unit = Unit(hilbert, 'hilbert', hilbert_tc, False, False, eq_comp)
dragon_unit = Unit(dragon, 'dragon', dragon_tc, False, False, eq_comp)
arrowhead_unit = Unit(arrowhead, 'arrowhead', arrowhead_tc, False, False, eq_comp)
peano_gosper_unit = Unit(peano_gosper, 'peano_gosper', peano_gosper_tc, False, False, eq_comp)
sierpinski_tri_unit = Unit(sierpinski_tri, 'sierpinski_tri', sierpinski_tri_tc, False, False, eq_comp)

# Unit Test List
units = [char_count_unit, reverse_unit, index_first_unit, index_last_unit, strip_char_unit,
         to_alphanum_unit, is_palindrome_unit, is_pangram_unit, is_anagram_unit, is_int_unit, caesar_cipher_unit,
         space_cull_unit, word_list_unit, pyg_latin_unit, is_balanced_unit, bi_to_dec_unit, pal_seq_unit,
         des_seq_unit, pangram_count_unit, snowflake_unit, hilbert_unit,dragon_unit, arrowhead_unit,
         peano_gosper_unit, sierpinski_tri_unit]

# Create Unit Test
unit_test = UnitTest("Strings Unit Test", units)

# Test!
unit_test.run_test()
